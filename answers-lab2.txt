###Question

1. 变量`x`的类型应该是`uintptr_t`，因为指针 `value`所指是一个虚拟地址。

2. tables as followings:
| Entry| Base Virtual Address | Points to (Logically): 		        	      |
|------|----------------------|-----------------------------------------|
| 1023 | 0xFFC00000           | Page table for top 4MB of phys memory	  |
| 1022 | 0xFF800000	          | Page table for top 4~8MB phys memory	   |
| .... | ..........           | ....                                    |
| 961  | 0xF0400000           | Page table for bottom 4~8MB phys memory |
| 960  | 0xF0000000 	         |	Page table for bottom 4MB phys memory   |
| 959  | 0xEFC00000 	         |	kernel's page table			                  |
| 958  | 0xEF800000 	         |	kernel's stack and some invalid memory  |	
| 957  | 0xEF400000 	         |	user's page talbe itself 		             |
| 956  | 0xEF000000 	         |	array of struct Page			                 |
| 955  | 0xEEC00000 	         |	ENVS for user mode 			                  |
| 2~954| 0x00800000-0xEE800000| User text,data,heap,stack, etc.		       |
| 1    | 0x00400000	          | Not Mapped				                          |
| 0    | 0x00000000	          | Not Mapped				                          |
 
3. 用户态程序无法访问内核地址空间是因为MMU会对访存权限进行检查，只要页表项的`PTE_U`未置为1则无法被用户态访问。

4. pages映射在UPAGES以上的大小为PTSIZE的地址区域内，每个struct Page的大小为8字节，PTSIZE为4M，因此理论上最多有(4MB/8B)*4KB = 2GB。但是从KERNBASE开始的虚拟地址用于remapped physic memory的地址区域的大小仅有256MB，因此所能支持的物理最大物理内存仅有256MB。

5. 总物理页数目为256MB/4KB=65535，因此用于管理struct Page所占用的空间为65535*8B = 512KB。两级页表占用的空间为4KB+1024*4KB=4100KB。
 
6. 在指令 `jmp *%eax`(entry.S第67行)执行之后将EIP转换到高于KERNBASE的虚拟地址。
EIP从低地址转换到高地址能够持续执行是因为物理内存[0,4M)的空间同时被映射到了虚拟内存的[0,4M）和[KERNBASE,KERNBASE+4M)。
进行转换是为了用户态空间与内核态空间的隔离。
